View(gaze_df)
setwd("C:/Users/KKK/OneDrive/Researches/webcam-eyetracking/Analysis tool")
install.packages("emov")
library("emov")
demo(fivesec,package = "emov")
View(fivesec)
install.packages("saccades")
library("saccades")
data((samples)
library(saccades)
library(saccades)
data("samples")
?rm``
?rm
rm(list = ls())
data("samples")
View(samples)
diagnostic.plot(samples,fixations)
fixations <- detect.fixations(samples)
diagnostic.plot(samples,fixations)
View(samples)
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
calibration_positions <- data.frame()
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
View(gaze_df)
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
View(gaze.temp)
View(gaze_df)
View(gaze.temp)
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
or (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
View(gaze_df)
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
print (i)
}
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
if (is.data.frame(df) && nrow(df)==0){
gaze_df <- gaze.temp
}
else{
gaze_df <- rbind(gaze_df,gaze.temp)
}
}
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze.temp
gaze_df <- rbind(gaze_df,gaze.temp)
}
View(gaze.temp)
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze.temp
}
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze.temp
}
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
View(gaze_df)
(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
#validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
#simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
#calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
#pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df_simple <- gaze_df[gaze_df$task == "simple",]
View(gaze_df_simple)
ggplot(gaze_df_simple,aes(dist_pixel)) + geom_histogram()
data("samples")
View(samples)
samples$trial <- NULL
fixations <- detect.fixations(samples)
data("samples")
View(gaze_df)
gaze_df_simple <- gaze_df[gaze_df$task == "simple",("elapsed_time,gaze_x,gaze_y")]
gaze_df_simple <- gaze_df[gaze_df$task == "simple",("elapsed_time","gaze_x","gaze_y")]
gaze_df_simple <- gaze_df[gaze_df$task == "simple",c("elapsed_time","gaze_x","gaze_y")]
View(gaze_df_simple)
fixations <- detect.fixations(gaze_df_simple)
gaze_df_simple$trial = 1
View(gaze_df_simple)
fixations <- detect.fixations(gaze_df_simple)
names(gaze_df_simple) <- c("time","x","y","trial")
fixations <- detect.fixations(gaze_df_simple)
View(fixations)
diagnostic.plot(gaze_df_simple,fixations)
gaze_df_simple$time <- gaze_df_simple$time - gaze_df_simple$time[0]
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[0],length(gaze_df_simple))
rep(gaze_df_simple$time[0],length(gaze_df_simple)
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[0],length(gaze_df_simple))
fixations <- detect.fixations(gaze_df_simple)
diagnostic.plot(gaze_df_simple,fixations)
rep(gaze_df_simple$time[0],length(gaze_df_simple))
>rep()
?rep
rep(4,5)
gaze_df_simple$time[0]
gaze_df_simple$time
rep(gaze_df_simple$time[1],length(gaze_df_simple))
rep(gaze_df_simple$time[1],length(gaze_df_simple$time))
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[1],length(gaze_df_simple$time))
fixations <- detect.fixations(gaze_df_simple)
library(saccades)
data("samples")
gaze_df_simple$trial = 1
names(gaze_df_simple) <- c("time","x","y","trial")
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[1],length(gaze_df_simple$time))
fixations <- detect.fixations(gaze_df_simple)
gaze_df_simple$trial = 1
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
library(saccades)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
#validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
#simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
#calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
#pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
###########################################
#
# DATA CLEANING
#
###########################################
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
###########################################
#
# SIMPLE ANALYSIS
#
###########################################
# average from gaze points to target positions. In pixels.
gaze_df_simple <- gaze_df[gaze_df$task == "simple",c("elapsed_time","gaze_x","gaze_y")]
summary(gaze_df_simple$dist_pixel)
gaze_df_simple$trial = 1
names(gaze_df_simple) <- c("time","x","y","trial")
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[1],length(gaze_df_simple$time))
fixations <- detect.fixations(gaze_df_simple)
View(fixations)
diagnostic.plot(gaze_df_simple,fixations)
View(gaze_df_simple)
data("samples")
View(samples)
gaze_df_simple <- gaze_df[gaze_df$task == "simple",c("elapsed_time","gaze_x","gaze_y")]
gaze_df_simple$trial = 1
names(gaze_df_simple) <- c("time","x","y","trial")
gaze_df_simple$time <- gaze_df_simple$time - rep(gaze_df_simple$time[1],length(gaze_df_simple$time))
fixations <- detect.fixations(gaze_df_simple)
calculate.summary(fixations)
gaze_df_simple <- gaze_df_simple[gaze_df_simple$time > 0,]
gaze_df_simple <- gaze_df_simple[gaze_df_simple$time > 0,]
fixations <- detect.fixations(gaze_df_simple)
gaze_df_simple <- gaze_df_simple[gaze_df_simple$time > 0,]
fixations <- detect.fixations(gaze_df_simple)
diagnostic.plot(gaze_df_simple,fixations)
gaze_df_simple <- gaze_df_simple[gaze_df_simple$time > 0,]
gaze_df_simple <- gaze_df_simple[1:1000,]
fixations <- detect.fixations(gaze_df_simple)
