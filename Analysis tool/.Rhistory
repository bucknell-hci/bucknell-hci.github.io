stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
#number
summary(gaze_df$dist_pixel)
# average from gaze points to target positions. In percentage.
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
#number
summary(gaze_df$dist_per)
#graph - heatmap
ggplot(gaze_df[task == "calibration",],aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
ggplot(gaze_df[task == "validation",],aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
gaze_df[task == "validation",]
gaze_df[gaze$task == "validation",]
gaze_df[gaze_df$task == "validation",]
ggplot(gaze_df[gaze_df$task == "validation",],aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
gaze_df <- gaze_df$[gaze_df$description == "success"]
gaze_df_fail <- gaze_df[gaze_df$description == "fail"]
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df <- gaze_df[gaze_df$description == "success",]
ggplot(gaze_df[gaze_df$task == "validation",],aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df <- gaze_df[gaze_df$description == "success",]
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
summary(gaze_df$dist_per)
summary(gaze_df$dist_pixel)
summary(gaze_df$dist_pixel)
ggplot(gaze_df,aes(dist_pixel)) + geom_density(shape  = 1)
ggplot(gaze_df,aes(dist_pixel)) + geom_hist(shape  = 1)
ggplot(gaze_df,aes(dist_pixel)) + geom_histogram(shape  = 1)
ggplot(gaze_df,aes(dist_pixel)) + geom_density()
ggplot(gaze_df,aes(dist_pixel)) + geom_density(fill = "red")
ggplot(gaze_df,aes(dist_pixel)) + geom_histogram(binwidth = 5)
ggplot(gaze_df,aes(dist_pixel)) + geom_histogram(binwidth = 10)
ggplot(gaze_df,aes(dist_pixel)) + geom_histogram(binwidth = 20)
ggplot(gaze_df,aes(dist_pixel_per)) + geom_histogram(binwidth = 20)
ggplot(gaze_df,aes(dist_per)) + geom_histogram(binwidth = 20)
ggplot(gaze_df,aes(dist_per)) + geom_histogram()
ggplot(gaze_df,aes(dist_pixel)) + geom_histogram()
ggplot(gaze_df_cal,aes(dist_pixel)) + geom_boxplot()
gaze_df_cal <- gaze_df[gaze_df$task == "calibration",]
ggplot(gaze_df_cal,aes(dist_pixel)) + geom_boxplot()
gaze_df_val <- gaze_df[gaze_df$task == "validation",]
ggplot(gaze_df_val,aes(dist_pixel)) + geom_histogram()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_box()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_boxplot()
ggplot(gaze_df_val,aes(x= dist_pixel, y = ..count..)) + geom_boxplot()
ggplot(gaze_df_cal,aes(dist_pixel)) + geom_histogram() + geom_density()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_histogram() + geom_density()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_density()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_histogram() + geom_density()
ggplot(gaze_df_val,aes(dist_pixel)) + geom_histogram() + geom_curve()
ggplot(gaze_df_val,aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
aze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df <- gaze_df[gaze_df$description == "success",]
gaze_df_cal <- gaze_df[gaze_df$task == "calibration",]
gaze_df_val <- gaze_df[gaze_df$task == "validation",]
ggplot(gaze_df_val,aes(dist_pixel)) + geom_histogram()
ggplot(gaze_df_val,aes(dist_per)) + geom_histogram()
gaze_df_simple <- gaze_df[gaze_df$task == "simple",]
View(gaze_df)
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
gaze_df_cal <- gaze_df[gaze_df$task == "calibration",]
gaze_df_val <- gaze_df[gaze_df$task == "validation",]
gaze_df_simple <- gaze_df[gaze_df$task == "simple",]
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df <- gaze_df[gaze_df$description == "success",]
summary(gaze_df_cal$dist_per)
ggplot(gaze_df_cal,aes(dist_per)) + geom_histogram()
ggplot(gaze_df_cal,aes(dist_per)) + geom_density()
boxplot(gaze_df_cal$dist_per, outlier = FALSE)
boxplot(gaze_df_cal$dist_per, outlier = TRUE)
boxplot(gaze_df_cal$dist_per, outlier = FALSE)
View(gaze_df_cal)
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
boxplot(remove_outliers(gaze_df_cal$dist_per), outlier = FALSE)
ggplot(remove_outliers(gaze_df_cal$dist_per)) + geom_density
boxplot(remove_outliers(gaze_df_cal$dist_per), outlier = FALSE)
ggplot(gaze_df_cal,aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
ggplot(remove_outliers(gaze_df_cal$dist_per)) + geom_point(shape  = 1) + geom_smooth()
ggplot(as.data.frame(remove_outliers(gaze_df_cal$dist_per))) + geom_point(shape  = 1) + geom_smooth()
ggplot(gaze_df_cal,aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = na.rm, ...)
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = na.rm, ...)
gaze_df_cal$dist_per
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = na.rm, ...)
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = TRUE, ...)
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(gaze_df_cal$dist_per, na.rm = na.rm)
lq <- qnt[1] - H
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(gaze_df_cal$dist_per, na.rm = TRUE)
lq <- qnt[1] - H
hq <- (qnt[2] + H)
ggplot(gaze_df_cal[hq > gaze_df_cal$dist_per > lq],aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
ggplot(gaze_df_cal[hq > gaze_df_cal$dist_per & gaze_df_cal$dist_per> lq,],aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
ggplot(gaze_df_cal,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
ggplot(gaze_df_cal,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
boxplot(remove_outliers(gaze_df_val$dist_per), outlier = FALSE)
nt <- quantile(gaze_df_val$dist_per, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(gaze_df_val$dist_per, na.rm = TRUE)
lq <- qnt[1] - H
hq <- (qnt[2] + H)
ggplot(gaze_df_val[hq > gaze_df_val$dist_per & gaze_df_val$dist_per> lq,],aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
#graph - heatmap
ggplot(gaze_df_val,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = validation_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
ggplot(gaze_df,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = simple_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
rm(list=ls())
cat("\014")
graphics.off()
library(ggplot2)
library(jsonlite)
setwd("C:/Users/quang/OneDrive/Researches/webcam-eyetracking/Analysis tool")
gaze_data <- fromJSON("getCSV/data.json")
# get all calibration position
calibration_positions <- data.frame()
# get all validation positions
validation_positions <- data.frame()
# get all simple positions
simple_positions <- data.frame()
# get all simple positions
pursuit_positions <- data.frame()
gaze_df  = data.frame()
for (i in 1:length(gaze_data)){
validation_positions <-unique(rbind(validation_positions,gaze_data[[i]]$info$validation_position_array))
simple_positions <-unique(rbind(simple_positions,gaze_data[[i]]$info$simple_position_array))
calibration_positions <-unique(rbind(calibration_positions,gaze_data[[i]]$info$caliration_position_array))
pursuit_positions <-unique(rbind(pursuit_positions,gaze_data[[i]]$info$pursuit_position_array))
info <- gaze_data[[i]]$info
gaze_x <- info$gaze_x
gaze_y <- info$gaze_y
object_x <- info$object_x
object_y <- info$object_y
column_length <- length(gaze_x)
id <- rep(gaze_data[[i]]$gazer_id,column_length)
time_collected <- rep(gaze_data[[i]]$time_collected,column_length)
url <- rep(info$url,column_length)
description <- rep(info$description,column_length)
task <- rep (info$task, column_length, column_length)
screen_width <- rep(info$canvasWidth, column_length)
screen_height <- rep(info$canvasHeight, column_length)
elapsed_time <- info$elapsedTime
gaze.temp <- data.frame(id,time_collected, url, description, task, elapsed_time, screen_width, screen_height,gaze_x,gaze_y,object_x,object_y)
gaze_df <- rbind(gaze_df,gaze.temp)
}
names(gaze_df) <- c("id","time_collected","url","description","task","elapsed_time","screen_width","screen_height","gaze_x","gaze_y","object_x","object_y")
names(validation_positions) <- c("x","y")
names(calibration_positions) <- c("x","y")
names(simple_positions) <- c("x","y")
names(pursuit_positions) <- c("x","y")
remove_outliers <- function(x, na.rm = TRUE, ...) {
qnt <- quantile(x, probs=c(.25, .75), na.rm = na.rm, ...)
H <- 1.5 * IQR(x, na.rm = na.rm)
y <- x
y[x < (qnt[1] - H)] <- NA
y[x > (qnt[2] + H)] <- NA
y
}
gaze_df$gaze_x_per <- gaze_df$gaze_x / gaze_df$screen_width
gaze_df$gaze_y_per <- gaze_df$gaze_y / gaze_df$screen_height
gaze_df$object_x_per <- gaze_df$object_x / gaze_df$screen_width
gaze_df$object_y_per <- gaze_df$object_y / gaze_df$screen_height
gaze_df$dist_pixel <- sqrt((gaze_df$object_x - gaze_df$gaze_x)^2 + (gaze_df$object_y - gaze_df$gaze_y)^2)
gaze_df$dist_per <- sqrt((gaze_df$object_x_per - gaze_df$gaze_x_per)^2 + (gaze_df$object_y_per - gaze_df$gaze_y_per)^2)
gaze_df_cal <- gaze_df[gaze_df$task == "calibration",]
gaze_df_val <- gaze_df[gaze_df$task == "validation",]
gaze_df_simple <- gaze_df[gaze_df$task == "simple",]
gaze_df_fail <- gaze_df[gaze_df$description == "fail",]
gaze_df <- gaze_df[gaze_df$description == "success",]
summary(gaze_df_cal$dist_per)
boxplot(remove_outliers(gaze_df_cal$dist_per), outlier = FALSE)
qnt <- quantile(gaze_df_cal$dist_per, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(gaze_df_cal$dist_per, na.rm = TRUE)
lq <- qnt[1] - H
hq <- (qnt[2] + H)
ggplot(gaze_df_cal[hq > gaze_df_cal$dist_per & gaze_df_cal$dist_per> lq,],aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
#graph - heatmap
ggplot(gaze_df_cal,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = calibration_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
summary(gaze_df_val$dist_per)
boxplot(remove_outliers(gaze_df_val$dist_per), outlier = FALSE)
qnt <- quantile(gaze_df_val$dist_per, probs=c(.25, .75), na.rm = TRUE)
H <- 1.5 * IQR(gaze_df_val$dist_per, na.rm = TRUE)
lq <- qnt[1] - H
hq <- (qnt[2] + H)
ggplot(gaze_df_val[hq > gaze_df_val$dist_per & gaze_df_val$dist_per> lq,],aes(elapsed_time,dist_per)) + geom_point(shape  = 1) + geom_smooth()
#graph - heatmap
ggplot(gaze_df_val,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = validation_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
#graph - heatmap
ggplot(gaze_df,aes(x=gaze_x_per,y=gaze_y_per)) +
theme(strip.text.x = element_text(size = 16)) +
stat_density2d(aes(fill=..level.., alpha = ..level..), geom="polygon", bins = 5, size = 0.01) +
scale_fill_gradient(low="green", high="red") +
#geom_point(aes(col = condition)) +
scale_x_continuous(limits = c(0, 1), breaks = c(0.2, 0.5, 0.8)) +
scale_y_reverse( lim=c(1,0), breaks = c(0.2, 0.5, 0.8)) +
scale_alpha_continuous(range=c(0.1,0.8)) +
geom_point(data = simple_positions, aes(x = x, y = y), shape = 3, size = 3) +
guides(fill = FALSE, group = FALSE, colour=FALSE, alpha = FALSE) +
labs("y" = "position of target in % of screen height", "x" = "position of target in % of screen width")
